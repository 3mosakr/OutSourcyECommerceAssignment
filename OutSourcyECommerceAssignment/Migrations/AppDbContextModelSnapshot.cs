// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OutSourcyECommerceAssignment.Data;

#nullable disable

namespace OutSourcyECommerceAssignment.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OutSourcyECommerceAssignment.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice@aa.com",
                            Name = "Alice Johnson",
                            Phone = "123-456-7890"
                        },
                        new
                        {
                            Id = 2,
                            Email = "bob@aa.com",
                            Name = "Bob Smith",
                            Phone = "234-567-8901"
                        },
                        new
                        {
                            Id = 3,
                            Email = "charlie@aa.com",
                            Name = "Charlie Brown",
                            Phone = "345-678-9012"
                        },
                        new
                        {
                            Id = 4,
                            Email = "diana@aa.com",
                            Name = "Diana Prince",
                            Phone = "456-789-0123"
                        });
                });

            modelBuilder.Entity("OutSourcyECommerceAssignment.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            OrderDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TotalPrice = 1199.98m
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            OrderDate = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TotalPrice = 699.99m
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3,
                            OrderDate = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TotalPrice = 699.98m
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 1,
                            OrderDate = new DateTime(2025, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TotalPrice = 1199.97m
                        });
                });

            modelBuilder.Entity("OutSourcyECommerceAssignment.Models.OrderProduc", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("EachPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduc");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ProductId = 1,
                            EachPrice = 999.99m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 1,
                            ProductId = 3,
                            EachPrice = 199.99m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 2,
                            EachPrice = 699.99m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 3,
                            ProductId = 4,
                            EachPrice = 299.99m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 3,
                            ProductId = 5,
                            EachPrice = 399.99m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 4,
                            ProductId = 2,
                            EachPrice = 699.99m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 4,
                            ProductId = 3,
                            EachPrice = 199.99m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 4,
                            ProductId = 4,
                            EachPrice = 299.99m,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("OutSourcyECommerceAssignment.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "High performance laptop",
                            Name = "Laptop",
                            Price = 999.99m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 2,
                            Description = "Latest model smartphone",
                            Name = "Smartphone",
                            Price = 699.99m,
                            Stock = 25
                        },
                        new
                        {
                            Id = 3,
                            Description = "Noise-cancelling headphones",
                            Name = "Headphones",
                            Price = 199.99m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 4,
                            Description = "Feature-rich smartwatch",
                            Name = "Smartwatch",
                            Price = 299.99m,
                            Stock = 15
                        },
                        new
                        {
                            Id = 5,
                            Description = "Lightweight tablet",
                            Name = "Tablet",
                            Price = 399.99m,
                            Stock = 20
                        });
                });

            modelBuilder.Entity("OutSourcyECommerceAssignment.Models.Order", b =>
                {
                    b.HasOne("OutSourcyECommerceAssignment.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OutSourcyECommerceAssignment.Models.OrderProduc", b =>
                {
                    b.HasOne("OutSourcyECommerceAssignment.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutSourcyECommerceAssignment.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OutSourcyECommerceAssignment.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("OutSourcyECommerceAssignment.Models.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
